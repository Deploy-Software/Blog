schema {
  query: QueryRoot
  mutation: MutationRoot
}

"""Directs the executor to query only when the field exists."""
directive @ifdef on FIELD

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type MutationRoot {
  signUp(email: String!, password: String!): String!
  signIn(email: String!, password: String!): String!
  newPost(title: String!, text: String!): Post!
  updatePost(postId: Int!, title: String, text: String): String!
}

type Post {
  id: Int!
  title: String!
  text: String!
}

type QueryRoot {
  posts: [Post!]!
  post(postId: Int!): Post
  ping: String!
}
